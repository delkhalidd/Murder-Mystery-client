import {API_URL} from "./const";
import {getCaseDetails, getMyCases, getQuestionsStatus} from "./api";

const copyInviteToken = async (token) => {
  try {
    await navigator.clipboard.writeText(token);
    showMessage('Invite token copied to clipboard!', 'success');
  } catch (error) {
    const textArea = document.createElement('textarea');
    textArea.value = token;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    showMessage('Invite token copied to clipboard!', 'success');
  }
};

const displayCaseDetails = async (caseDetails) => {
  try {
    const questionsStatus = await getQuestionsStatus(caseDetails.id);

    const overview = document.createElement("div");
    const h = document.createElement("h2");
    h.innerText = caseDetails.title;
    overview.appendChild(h);
    for(const [name, detail] of [
      ["Description", caseDetails.description || "None"],
      ["Created", new Date(caseDetails.created_at).toLocaleDateString()],
      ["Case ID", caseDetails.id],
      ["Invite Token", caseDetails.invite_token]
    ]){
      const p = document.createElement("p");
      const strong = document.createElement("strong");
      const span = document.createElement("span");
      span.innerText = detail;
      strong.innerText = `${name}:`
      p.append(strong, span);
      overview.appendChild(p);
    }
    document.getElementById('case-info').innerHTML = overview.innerHTML;

    const statusContainer = document.getElementById('questions-status');
    let statusHtml = `<h4>Content Status: ${questionsStatus.status}</h4>`;

    if (questionsStatus.status === 'PENDING') {
      statusHtml += '<p style="color: orange;">No questions created yet. Questions are generated when you add investigation elements.</p>';
    } else if (questionsStatus.status === 'PROCESSING') {
      statusHtml += '<p style="color: blue;">Questions and briefs are being generated by AI. Please wait...</p>';
    } else if (questionsStatus.status === 'ERRORED') {
      statusHtml += `<p style="color: red;">Error generating content: ${questionsStatus.message}</p>`;
    } else if (questionsStatus.status === 'COMPLETED') {
      statusHtml += '<p style="color: green;">Questions and briefs are ready for students!</p>';
    }

    statusContainer.innerHTML = statusHtml;

    if (questionsStatus.status === 'COMPLETED' || (caseDetails.questions && caseDetails.questions.length > 0)) {
      displayQuestionsAndBriefs(caseDetails);
    } else {
      document.getElementById('questions-list').innerHTML = '';
    }

    document.getElementById('cases-section').style.display = 'none';
    document.getElementById('case-details').style.display = 'block';

  } catch (error) {
    showMessage(`Error loading case details: ${error.message}`, 'error');
  }
};

const displayQuestionsAndBriefs = (caseData) => {
  const container = document.getElementById('questions-list');
  let html = '';

  if (caseData.briefs && caseData.briefs.length > 0) {
    html += `
      <h4>Case Briefs (${caseData.briefs.length})</h4>
      ${caseData.briefs.map((brief, index) => `
        <div class="brief-item">
          <h5>Brief ${index + 1}: ${brief.topic}</h5>
          <p>${brief.body}</p>
        </div>
      `).join('')}
    `;
  }

  if (caseData.questions && caseData.questions.length > 0) {
    html += `
      <h4>Generated Questions (${caseData.questions.length})</h4>
      ${caseData.questions.map((question, index) => `
        <div class="question-item">
          <h5>Question ${index + 1}</h5>
          ${question.original ? `<p><strong>Original Input:</strong> ${question.original}</p>` : ''}
          <p><strong>Generated Question:</strong> ${question.body}</p>
          <p><strong>Expected Answer:</strong> ${question.answer}</p>
        </div>
      `).join('')}
    `;
  }

  if (!html) {
    html = '<p>No questions or briefs found.</p>';
  }

  container.innerHTML = html;
};

const viewCaseDetails = (caseId) => {
  displayCaseDetails(caseId);
};

const showMessage = (message, type = 'info') => {
  const messageDiv = document.getElementById('message');
  messageDiv.innerHTML = `<div class="alert alert-${type}">${message}</div>`;

  setTimeout(() => {
    messageDiv.innerHTML = '';
  }, 5000);
};

(async()=>{
  console.log('Teacher dashboard script loaded');
  console.log('API_URL available:', typeof API_URL !== 'undefined' ? API_URL : 'NOT FOUND');

  const loadCasesBtn = document.getElementById('loadCasesBtn');
  const backToCasesBtn = document.getElementById('back-to-cases');

  console.log('Buttons found:', {
    loadCasesBtn: !!loadCasesBtn,
    backToCasesBtn: !!backToCasesBtn
  });

  try {
    const cases = await getMyCases();
    console.log('Cases retrieved:', cases);

    const casesContainer = document.querySelector(".cases");
    let i = cases.length;
    const focusedCase = new URLSearchParams(window.location.search).get("case");
    for(const c of cases){
      const child = document.createElement("div");
      child.classList.add("case");
      const idHeader = document.createElement("h2");
      const nameHeader = document.createElement("h2");
      const playerCountHeader = document.createElement("h2");
      const buttonCont = document.createElement("div");
      buttonCont.classList.add("buttons");

      const detailsButton = document.createElement("a");
      const detailsSpan = document.createElement("span");
      detailsButton.href = "#case-info";
      const analyticsButton = document.createElement("a");
      const analyticsSpan = document.createElement("span");
      analyticsButton.href = `/case-analytics?id=${c.id}`;

      detailsButton.addEventListener("click", (e) => {
        e.preventDefault();
        displayCaseDetails(c);
      });

      idHeader.innerText = `Case ${i}`;
      nameHeader.innerText = c.title;
      playerCountHeader.innerText = c.questions.length;
      detailsSpan.innerText = "View Details";
      analyticsSpan.innerText = "View Analytics";

      detailsButton.append(detailsSpan);
      analyticsButton.append(analyticsSpan);
      buttonCont.append(detailsButton, analyticsButton);
      child.append(idHeader, nameHeader, playerCountHeader, buttonCont);

      casesContainer.appendChild(child);
      if(!!focusedCase && focusedCase === c.id.toString()) displayCaseDetails(c);
      i--;
    }

  } catch (error) {
    console.error('Error in load cases:', error);
    showMessage(`Error loading cases: ${error.message}`, 'error');
  }

  if (backToCasesBtn) {
    backToCasesBtn.addEventListener('click', (e) => {
      e.preventDefault();
      document.getElementById('cases-section').style.display = 'block';
      document.getElementById('case-details').style.display = 'none';
    });
  }
})();

document.getElementById("user_fname").innerText = JSON.parse(localStorage.getItem('userData')).firstname

window.viewCaseDetails = viewCaseDetails;
window.copyInviteToken = copyInviteToken;
