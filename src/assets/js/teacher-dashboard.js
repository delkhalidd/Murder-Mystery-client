import {API_URL} from "./const";
import {getMyCases, getQuestionsStatus} from "./api";

const copyInviteToken = async (token) => {
  try {
    await navigator.clipboard.writeText(token);
    showMessage('Invite token copied to clipboard!', 'success');
  } catch (error) {
    const textArea = document.createElement('textarea');
    textArea.value = token;
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    showMessage('Invite token copied to clipboard!', 'success');
  }
};

const displayCaseDetails = async (caseDetails) => {
  try {
    const questionsStatus = await getQuestionsStatus(caseDetails.id);

    const overview = document.createElement("div");
    overview.classList.add("case-info");
    overview.id = "case-info";

    const h = document.createElement("h2");
    h.innerText = caseDetails.title;
    overview.appendChild(h);
    for(const [name, detail] of [
      ["Description", caseDetails.description || "None"],
      ["Created", new Date(caseDetails.created_at).toLocaleDateString()],
      ["Case ID", caseDetails.id],
      // ["Invite Token", caseDetails.invite_token]
    ]){
      const p = document.createElement("p");
      const strong = document.createElement("strong");
      const span = document.createElement("span");
      span.innerText = detail;
      strong.innerText = `${name}: `
      p.append(strong, span);
      overview.appendChild(p);
    }
    document.getElementById('case-info').outerHTML = overview.outerHTML;

    const statusContainer = document.getElementById('questions-status');
    statusContainer.innerHTML = {
      'PENDING':
        '<p style="color: orange;">No questions created yet. Questions are generated when you add investigation elements.</p>',
      'PROCESSING':
        '<p style="color: blue;">Questions and briefs are being generated by AI. Please wait...</p>',
      'ERRORED':
        `<p style="color: red;">Error generating content: ${questionsStatus.message}</p>`,
      'COMPLETED':
        '<p style="color: green;">Questions and briefs are ready for students!</p>',
    }[questionsStatus.status] || `<h4>Content Status: ${questionsStatus.status}</h4>`;

    if (questionsStatus.status === 'COMPLETED' || (caseDetails.questions && caseDetails.questions.length > 0)) {
      const qbCont = document.createElement("div");
      qbCont.id = "questions-list";

      const questions = document.createElement("div");
      const briefs = document.createElement("div");
      briefs.classList.add("briefs");

      const questionsTitle = document.createElement("h2");
      const briefsTitle = document.createElement("h2");
      questionsTitle.classList.add("underline", "shadow");
      briefsTitle.classList.add("underline", "shadow");
      questionsTitle.innerText = "Questions";
      briefsTitle.innerText = "Briefs";

      questions.append(questionsTitle);
      briefs.append(briefsTitle);

      for(const [children, cont, getComponents] of [
        [questionsStatus.result.questions, questions, el => {
          return [
            ["[ORIGINAL]", el.original, "h4"],
            ["[TRANSFORMED]", el.body, "h4"],
            ["[ANSWER]", el.answer, "p"]
          ]
        }],
        [questionsStatus.result.briefs, briefs, el => {
          return [
            ["[TOPIC]", el.topic, "h4"],
            ["[BODY]", el.body, "p"]
          ]
        }],
      ]){
        for(const item of children){
          const el = document.createElement("div");
          el.classList.add("item");

          for(const [titleText, bodyText, tag] of getComponents(item)){
            const itemCont = document.createElement("div");
            const title = document.createElement("span");
            const body = document.createElement(tag);

            title.innerText = titleText;
            body.innerText = bodyText;

            itemCont.append(title, body);
            el.append(itemCont);
          }

          cont.append(el);
        }
      }

      qbCont.append(questions, briefs);

      document.getElementById("questions-list").outerHTML = qbCont.outerHTML;
    } else {
      document.getElementById('questions-list').innerHTML = '';
    }

    const copyButton = document.getElementById("copy-invite");
    const onClick = async () => {
      const url = new URL(window.location);
      const oldText = copyButton.innerText;
      url.pathname = "/invite";
      url.search = "?token="+encodeURIComponent(caseDetails.invite_token);

      const done = await window.navigator.clipboard.writeText(url.toString())
        .then(()=>true).catch(()=>false);
      if(!done) return window.prompt("Please copy the URL", url.toString());

      copyButton.innerText = "Copied to clipboard!";
      await new Promise(r=>setTimeout(r, 2000));
      copyButton.innerText = oldText;
    }
    copyButton.removeEventListener("click", onClick);
    copyButton.addEventListener("click", onClick);

    document.getElementById('cases-section').style.display = 'none';
    document.getElementById("case-header").style.display = "none";
    document.getElementById('case-details').style.display = 'flex';
    document.querySelector(".questions").scrollTop = 0;

  } catch (error) {
    showMessage(`Error loading case details: ${error.message}`, 'error');
  }
};

const viewCaseDetails = (caseId) => {
  displayCaseDetails(caseId);
};

const showMessage = (message, type = 'info') => {
  const messageDiv = document.getElementById('message');
  messageDiv.innerHTML = `<div class="alert alert-${type}">${message}</div>`;

  setTimeout(() => {
    messageDiv.innerHTML = '';
  }, 5000);
};

(async()=>{
  console.log('Teacher dashboard script loaded');
  console.log('API_URL available:', typeof API_URL !== 'undefined' ? API_URL : 'NOT FOUND');

  const loadCasesBtn = document.getElementById('loadCasesBtn');
  const backToCasesBtn = document.getElementById('back-to-cases');

  console.log('Buttons found:', {
    loadCasesBtn: !!loadCasesBtn,
    backToCasesBtn: !!backToCasesBtn
  });

  try {
    const cases = await getMyCases();
    console.log('Cases retrieved:', cases);

    const casesContainer = document.querySelector(".cases");
    let i = cases.length;
    const focusedCase = new URLSearchParams(window.location.search).get("case");
    for(const c of cases){
      const child = document.createElement("div");
      child.classList.add("case");
      const idHeader = document.createElement("h2");
      const nameHeader = document.createElement("h2");
      const playerCountHeader = document.createElement("h2");
      const buttonCont = document.createElement("div");
      buttonCont.classList.add("buttons");

      const detailsButton = document.createElement("a");
      const detailsSpan = document.createElement("span");
      detailsButton.href = "#case-info";
      const analyticsButton = document.createElement("a");
      const analyticsSpan = document.createElement("span");
      analyticsButton.href = `/case-analytics?id=${c.id}`;

      detailsButton.addEventListener("click", (e) => {
        e.preventDefault();
        displayCaseDetails(c);
      });

      idHeader.innerText = `Case ${i}`;
      nameHeader.innerText = c.title;
      playerCountHeader.innerText = c.questions.length;
      detailsSpan.innerText = "View Details";
      analyticsSpan.innerText = "View Analytics";

      detailsButton.append(detailsSpan);
      analyticsButton.append(analyticsSpan);
      buttonCont.append(detailsButton, analyticsButton);
      child.append(idHeader, nameHeader, playerCountHeader, buttonCont);

      casesContainer.appendChild(child);
      if(!!focusedCase && focusedCase === c.id.toString()) displayCaseDetails(c);
      i--;
    }

  } catch (error) {
    console.error('Error in load cases:', error);
    showMessage(`Error loading cases: ${error.message}`, 'error');
  }

  if (backToCasesBtn) {
    backToCasesBtn.addEventListener('click', (e) => {
      e.preventDefault();
      document.getElementById('cases-section').style.display = 'block';
      document.getElementById('case-details').style.display = 'none';
      document.getElementById("case-header").style.display = "block";
    });
  }
})();

document.getElementById("user_fname").innerText = JSON.parse(localStorage.getItem('userData')).firstname

window.viewCaseDetails = viewCaseDetails;
window.copyInviteToken = copyInviteToken;
